PHP libgit2 bindings API documentation
--------------------------------------------------------------------------------
The API is divided (roughly) by the kind of libgit2 object on which the API
function operates (e.g. git_repository, git_reference, ETC.). In most cases the
PHP API uses resource values for the major libgit2 opaque data types.

Since PHP has native exception handling, most API calls are reworked to return
the main result value. For example, git_repository_new() returns a resource to
the repository (originally assigned to the first by-reference parameter). We
also rework the structure of some library calls due to inherent difficulties
porting the C interface to PHP (e.g. when pointers are used). Sometimes this
requires adding API routines not originally in the libgit2 specification.

Please consult the official libgit2 documentation for descriptions of the
behavior of the functions and their arguments. This section only details the PHP
interface.

--------------------------------------------------------------------------------
API Structure Reference

The following structures are represented as resources in the PHP API. They
generally represent opaque structures from the C API (but not necessarily).

Note that the PHP resource type names (which are really just diagnostic in
purpose) are determined by the C++ compiler via 'typeid'.

    git2 type
    ---------

    git_repository
    git_reference
    git_object
    git_revwalk
    git_packbuilder
    git_indexer
    git_odb
    git_odb_object
    git_commit
    git_blob
    git_tree
    git_tree_entry
    git_signature
    git_treebuilder
    git_blame
    git_annotated_commit
    git_branch_iterator
    git_reference_iterator
    git_config
    git_config_iterator
    git_tag
    git_diff
    git_diff_stats
    git_index

The following structures are not represented as resources in the PHP
API. Instead a scalar, array or object type is used:

   git2 type                                      PHP type
   ---------                                      --------

    git_buf                                        string
    git_oid                                        string
    git_odb_writepack                              object
    git_odb_backend                                object
    git_odb_stream                                 object
    git_writestream                                object
    git_config_backend                             object
    git_blame_hunk                                 array
    git_revspec                                    array
    git_config_entry                               array
    git_diff_options                               array
    git_diff_delta                                 array
    git_diff_file                                  array
    git_diff_binary                                array
    git_diff_binary_file                           array
    git_diff_hunk                                  array
    git_diff_line                                  array
    git_diff_format_email_options                  array

For objects, see the later section regarding Classes.

Enumeration types are treated as integers in PHP userspace. A global constant is
generally defined for enumerator. If an enumerator is missing, then it is
acceptable to define it yourself using "define(...)" or by just using the
correct constant value from the git2 headers.

--------------------------------------------------------------------------------
Function API Reference

Core API routines operate on opaque, resource values. They try to conform to the
original, C library calls they wrap. Most if not all of these functions have the
prefix "git_".

Functions provided by the extension that are not git2 wrappers have the prefix
'git2_*'. These are provided as supplements or additions where appropriate.

----------------------------------------
[misc]
----------------------------------------

git2_version()

    Gets a string representing the php-git2 and libgit2 version.

    Returns string

git_libgit2_version()

    Gets the libgit2 version string. The version string has the form "%1.%2.%3"
    where %1, %2 and %3 are the respective major, minor and revision numbers
    returned from the underlying call to git_libgit2_version().

    Returns string

git_libgit2_features()

    Returns int

----------------------------------------
[git_repository]
----------------------------------------

git_repository_init(string,bool)

    Returns git_repository resource

git_repository_new()

    Returns git_repository resource

git_repository_free(resource)

git_repository_open(string)

    Returns git_repository resource

git_repository_open_bare(string)

    Returns git_repository resource

git_repository__cleanup(resource)

git_repository_detach_head(resource)

git_repository_discover(string,bool,string)

    Returns string

git_repository_get_namespace(resource)

    Returns string

git_repository_hashfile(resource,string,long,string)

    Returns string

git_repository_path(resource)

    Returns string

git_repository_odb(resource)

    Returns git_odb resource

git_repository_set_odb(resource,resource)

git_repository_set_head(resource,string)

git_repository_set_head_detached(resource,string)

    Returns bool

git_repository_head(resource)

    Returns git_reference resource

git_repository_is_empty(resource)

    Returns bool

git_repository_is_bare(resource)

    Returns bool

git_repository_is_shallow(resource)

    Returns bool

git_repository_head_detached(resource)

    Returns bool

git_repository_head_unborn(resource)

    Returns bool

git_repository_ident(&string,repo)

    ** The returned string is the name. The assigned out-parameter is the
       email. **

    Returns string

git_repository_init_ext(string,array|null)

    ** The final parameter is an array of options with keys corresponding to the
       git_repository_init_options struct. It may be null if you want to use the
       defaults. **

    Returns git_repository resource

git_repository_message(resource)

    Returns string or false

git_repository_message_remove(resource)

git_repository_open_ext(string|null,int,string)

    Returns git_repository resource

git_repository_reinit_filesystem(resource,bool)

git_repository_set_bare(resource)

git_repository_set_head_detached_from_annotated(resource,resource)

git_repository_set_ident(resource,string,string)

git_repository_set_namespace(resource,string)

git_repository_set_workdir(resource,string,bool)

git_repository_state(resource)

    Returns int

git_repository_state_cleanup(resource)

git_repository_workdir(resource)

    Returns string

git_repository_wrap_odb(resource)

    Returns git_repository resource

git_repository_config(resource)

    Returns git_config resource

git_repository_config_snapshot(resource)

    Returns git_config resource

git_repository_set_config(resource,resource)

----------------------------------------
[git_reference]
----------------------------------------

git_reference_list(resource)

    Returns array of string

git_reference_lookup(resource,string)

    Returns git_reference resource

git_reference_free(resource)

git_reference_peel(resource,long)

    Returns git_reference resource

git_reference_name_to_id(resource,string)

    Returns string

git_reference_create(resource,string,string,bool,string)

    Returns git_reference resource

git_reference_create_matching(resource,string,string,bool,string,string)

    Returns git_reference resource

git_reference_target(resource)

    Returns string

git_reference_target_peel(resource)

    Returns string

git_reference_name(resource)

    Returns string

git_reference_cmp(resource,resource)

    Returns bool

git_reference__alloc(string,string,string)

    Returns git_reference resource

git_reference__alloc_symbolic(string,string)

    Returns git_reference resource

git_reference_delete(resource)

git_reference_dup(resource)

    Returns git_reference resource

git_reference_ensure_log(resource,string)

git_reference_has_log(resource,string)

    Returns bool

git_reference_is_branch(resource)

    Returns bool

git_reference_is_note(resource)

    Returns bool

git_reference_is_remote(resource)

    Returns bool

git_reference_is_tag(resource)

    Returns bool

git_reference_is_valid_name(string)

    Returns bool

git_reference_iterator_new(resource)

    Returns git_reference_iterator resource

git_reference_iterator_glob_new(resource)

    Returns git_reference_iterator resource

git_reference_next(resource)

    Returns git_reference resource or false if iteration is over

git_reference_next_name(resource)

    Returns string or false if iteration is over

git_reference_normalize_name(string,int)

    Returns string

git_reference_owner(resource)

    Returns git_repository resource

git_reference_remove(resource,string)

git_reference_rename(resource,string,bool,string)

    Returns git_reference resource

git_reference_resolve(resource)

    Returns git_reference resource

git_reference_set_target(resource,string,string)

    Returns git_reference resource

git_reference_shorthand(resource)

    Returns string

git_reference_type(resource)

    Returns int

git_reference_foreach(resource,callable,mixed)

git_reference_foreach_name(resource,callable,mixed)

git_reference_foreach_glob(resource,string,callable,mixed)

----------------------------------------
[git_object]
----------------------------------------
git_object_id(resource)

    Returns string

git_object_lookup(resource,string,int)

    Returns resource

git_object_free(resource)

git_object_peel(resource,int)

    Returns git_object resource

----------------------------------------
[git_revwalk]
----------------------------------------
git_revwalk_new(resource)

git_revwalk_push(resource,string)

git_revwalk_next(resource)

    Returns string or false when on iterover

git_revwalk_hide(resource,string)

git_revwalk_sorting(resource,int)

git_revwalk_reset(resource)

git_revwalk_free(resource)

----------------------------------------
[git_packbuilder]
----------------------------------------

git_packbuilder_new(resource)

    Returns git_packbuilder resource

git_packbuilder_free(resource)

git_packbuilder_hash(resource)

    Returns string

git_packbuilder_insert_commit(resource,string)

git_packbuilder_insert_walk(resource,resource)

git_packbuilder_insert_recur(resource,string,string|null)

git_packbuilder_insert_tree(resource,string)

git_packbuilder_insert(resource,string,string|null)

git_packbuilder_foreach(resource,callable,mixed)

    ** If the 3rd parameter is a stream and the 2nd parameter is null, then each
       call will write the data to the stream. **

    Callback signature: callback(string $data,int $length,mixed $payload)

git_packbuilder_set_threads(resource,int)

git_packbuilder_set_callbacks(resource,callable,mixed)

    Callback signature: callback(int $stage,int $current,int $total,mixed $payload)

git_packbuilder_object_count(resource)

    Returns int

git_packbuilder_write(resource,string,int,callable,mixed)

    Callback signature: callback(array $stats)

        ** Stats array has properties of git2 git_transfer_progress struct. **

git_packbuilder_written(resource)

    Returns int

----------------------------------------
[git_indexer]
----------------------------------------

git_indexer_new(string,long,resource,callable,mixed)

    ** The 3rd parameter may be null. **

    Callback signature: callback(array $stats,mixed $payload)

    Return git_indexer resource

git_indexer_hash(resource)

    Returns string

git_indexer_append(resource,string)

    ** Transfer progress is stored in the resource. As such it is not passed to
       this function. **

git_indexer_commit(resource)

    ** Transfer progress is stored in the resource. As such it is not passed to
       this function. **

git_indexer_free(resource)

git2_indexer_stats(resource)

    ** To avoid the expense of translating a stats object every time and indexer
       operation is performed, the user may call this to get the indexer
       transfer progress stats at any time. The transfer progress structure is
       stored in the indexer resource object. **

    Returns array, associative array with git_transfer_progress fields

----------------------------------------
[git_odb]
    [git_odb_object]
----------------------------------------

git_odb_new()

    Return git_odb resource

git_odb_free(resource)

git_odb_write_pack(resource,callable,mixed)

    ** The 3rd parameter may be null. **

    Returns object instance of type GitODBWritepack

git_odb_backend_pack(string)

    Returns object instance of type GitODBBackend

git_odb_backend_loose(string,int,bool,int,int)

    Returns object instance of type GitODBBackend

git_odb_backend_one_pack(string)

    Returns object instance of type GitODBBackend

git_odb_open(string)

    Returns git_odb resource

git_odb_write(resource,string,int)

    Returns string

git_odb_read(resource,string)

    Returns git_odb_object resource

git_odb_read_header(&int,resource,string)

    Returns int (the size of the object)

git_odb_read_prefix(resource,string)

    Returns git_odb_object resource

git_odb_object_free(resource)

git_odb_object_data(resource)

    Returns string

git_odb_object_id(resource)

    Returns string

git_odb_object_size(resource)

    Returns int

git_odb_object_type(resource)

    Returns int

git_odb_object_dup(resource)

    Returns git_odb_object resource

git_odb_open_rstream(resource,string)

    Returns object instance of type GitODBStream

git_odb_open_wstream(resource,int,int)

    Returns object instance of type GitODBStream

git_odb_stream_read(GitODBStream,int)

    ** The 2nd parameter is the length of the buffer to allocate. **

    Returns string

git_odb_stream_write(GitODBStream,string)

git_odb_stream_finalize_write(GitODBStream)

    Returns string

git_odb_add_alternate(resource,GitODBBackend,int)

git_odb_add_disk_alternate(resource,string)

git_odb_add_backend(resource,GitODBBackend,int)

git_odb_exists(resource,string)

    Returns int

git_odb_exists_prefix(resource,string)

    Returns int

git_odb_foreach(resource,callable,mixed)

git_odb_refresh(resource)

git_odb_get_backend(resource,int)

    Returns object of type GitODBBackend

git_odb_num_backends(resource)

    Returns int

git_odb_hash(string,int)

    Returns string

git_odb_hashfile(string,int)

    Returns string

----------------------------------------
[git_commit]
----------------------------------------

git_commit_lookup(resource,string)

    Returns git_commit resource

git_commit_lookup_prefix(resource,string)

    Returns git_commit resource

git_commit_parentcount(resource)

    Returns int

git_commit_parent_id(resource,int)

    Returns string

git_commit_parent(resource,int)

    Returns git_commit resource

git_commit_nth_gen_ancestor(resource,int)

    Returns git_commit resource

git_commit_id(resource)

    Returns string

git_commit_free(resource)

git_commit_owner(resource)

    Returns git_repository resource

git_commit_tree(resource)

    Returns git_tree resource

git_commit_tree_id(resource)

    Returns string

git_commit_time(resource)

    Returns int

git_commit_time_offset(resource)

    Returns int

git_commit_summary(resource)

    Returns string

git_commit_raw_header(resource)

    Returns string

git_commit_body(resource)

    Returns string

git_commit_message(resource)

    Returns string

git_commit_message_encoding(resource)

    Returns string

git_commit_message_raw(resource)

    Returns string

git_commit_author(resource)

    Returns git_signature resource

git_commit_committer(resource)

    Returns git_signature resource

git_commit_create(resource,string|null,resource,resource,string|null,string,resource,array)

    Example:
        $oid = git_commit_create($repo,$ref,$author,$committer,
                                 $encoding,$message,$tree,$parents);

    ** The final parameter should be an array of git_commit resources; the size
       is not previously passed in the PHP userspace version. **

    Returns string containing the new commit's OID

git_commit_create_from_callback(resource,string|null,resource,resource,string|null,string,string,callable,mixed)

    Example
        $oid = git_commit_from_callback($repo,$ref,$author,$committer,$encoding,
                                        $message,$treeId,$callable,$payload);

    Returns string containing the new commit's OID

git_commit_create_from_ids(resource,string|null,resource,resource,string|null,string,string,array)

    Example
        $oid = git_commit_from_ids($repo,$ref,$author,$committer,$encoding,
                                   $message,$treeId,$parents)

    ** The array should be a list of strings representing the parent commit
       OIDs. **

    Returns string containing the new commit's OID

git_commit_create_buffer(resource,resource,resource,string|null,string,resource,array)

    Example:
        $data = git_commit_create_buffer($repo,$author,$committer,
                                         $encoding,$message,$tree,$parents);

    ** The final parameter should be an array of git_commit resources; the size
       is not previously passed in the PHP userspace version. **

    Returns string containing the commit object

git_commit_create_with_signature(resource,string,string,string)

    Returns string

git_commit_amend(resource,string|null,resource|null,resource|null,string|null,string|null,resource|null)

    ** The arguments behavior like the C function in that NULL's are disregarded
       when amending the commit. **

    Returns string

git_commit_dup(resource)

    Returns git_commit resource

git_commit_extract_signature(&string,resource,string,string|null)

    ** The signed data is written to the string out parameter. The signature is
       returned. **

    Returns string

git_commit_header_field(resource,string)

    Returns string

----------------------------------------
[git_blob]
----------------------------------------

git_blob_create_frombuffer(resource,string)

    Returns string

git_blob_create_fromdisk(resource,string)

    Returns string

git_blob_create_fromworkdir(resource,string)

    Returns string

git_blob_filtered_content(resource,string,bool)

    Returns string

git_blob_free(resource)

git_blob_id(resource)

    Returns string

git_blob_is_binary(resource)

    Returns int

git_blob_lookup(resource,string)

    Returns git_blob resource

git_blob_lookup_prefix(resource,string)

    Returns resource

git_blob_owner(resource)

    Returns git_repository resource

git_blob_rawcontent(resource)

    Returns string

git_blob_rawsize(resource)

    Returns int

git_blob_dup(resource)

    Returns git_blob resource

git_blob_create_fromstream(resource,string|null)

    Returns object of type GitWritestream

git_blob_create_fromstream_commit(GitWritestream)

    Returns string

----------------------------------------
[git_tree]
    [git_tree_entry]
----------------------------------------

git_tree_dup(resource)

    Returns git_tree resource

git_tree_entrycount(resource)

    Returns int

git_tree_free(resource)

git_tree_id(resource)

    Returns string

git_tree_lookup(resource,string)

    Returns git_tree resource

git_tree_lookup_prefix(resource,string)

    Returns git_tree resource

git_tree_owner(resource)

    Returns git_repository resource

git_tree_entry_free(resource)

git_tree_entry_byid(resource,string)

    Returns git_tree_entry resource or null

git_tree_entry_byindex(resource,int)

    Returns git_tree_entry resource or null

git_tree_entry_byname(resource,string)

    Returns git_tree_entry resource or null

git_tree_entry_bypath(resource,string)

    Returns git_tree_entry resource

git_tree_entry_dup(resource)

    Returns git_tree_entry resource

git_tree_entry_filemode(resource)

    Returns int

git_tree_entry_filemode_raw(resource)

    Returns int

git_tree_entry_name(resource)

    Returns string

git_tree_entry_cmp(resource,resource)

    Returns int

git_tree_entry_id(resource)

    Returns string

git_tree_entry_type(resource)

    Returns int

git_tree_walk(resource,int,callable,mixed)

    Returns int

----------------------------------------
[git_signature]
----------------------------------------

git_signature_new(string,string,long,long)

    Returns git_signature resource

git_signature_free(resource)

git_signature_dup(resource)

    Returns git_signature resource

git_signature_default(resource)

    Returns git_signature resource

git_signature_now(string,string)

    Returns git_signature resource

git_signature_from_buffer(string)

    Returns git_signature resource

git2_signature_convert(resource)

    Gets an associative array corresponding to the git_signature structure. The
    associative array has the following keys:

        - name
        - email
        - when.time
        - when.offset

    Returns array

----------------------------------------
[git_treebuilder]
----------------------------------------

git_treebuilder_new(resource,resource|null)

    Returns git_treebuilder resource

git_treebuilder_free(resource)

git_treebuilder_write(resource)

    Returns string

git_treebuilder_insert(resource,string,string,int)

    ** Note: this function always returns the tree entry. **

    Returns git_tree_entry resource

git_treebuilder_get(resource,string)

    Returns git_tree_entry resource

git_treebuilder_remove(resource,string)

git_treebuilder_clear(resource)

git_treebuilder_entrycount(resource)

    Returns int

----------------------------------------
[git_blame]
----------------------------------------

git_blame_file(resource,string,array|null)

    ** The final parameter is an array of options with keys corresponding to the
       git_blame_options struct. It may be null if you want to use the
       defaults. **

    Returns git_blame resource

git_blame_buffer(resource,string)

    Returns git_blame resource

git_blame_get_hunk_count(resource)

    Returns int

git_blame_get_hunk_byindex(resource,int)

    ** Note: the return array contains a single dimensional representation of
       the hunk data. Example:

        array(15) {
          ["lines_in_hunk"]
          ["final_commit_id"]
          ["final_start_line_number"]
          ["final_signature.name"]
          ["final_signature.email"]
          ["final_signature.when.time"]
          ["final_signature.when.offset"]
          ["orig_commit_id"]
          ["orig_path"]
          ["orig_start_line_number"]
          ["orig_signature.name"]
          ["orig_signature.email"]
          ["orig_signature.when.time"]
          ["orig_signature.when.offset"]
          ["boundary"]
        } **

    Returns array

git_blame_get_hunk_byline(resource,int)

    ** See git_blame_get_hunk_by_index() for an example of what the return
       result looks like. **

    Returns array

git_blame_get_hunk_count(resource)

    Returns int

----------------------------------------
[git_revparse]
----------------------------------------

git_revparse(resource,string)

    ** Note: the return array contains the fields of the revspec
       structure. Example:

        array(3) {
          ["from"]  resource of type git_object (may be null)
          ["to"]    resource of type git_object (may be null)
          ["flags"] int
        } **

    Returns array

git_revparse_ext(&resource,resource,string)

    ** The first argument is an output parameter. A resource of type
       git_reference may be written or null. **

    Returns git_object resource

git_revparse_single(resource,string)

    Returns git_object resource

----------------------------------------
[git_annotated_commit]
----------------------------------------

git_annotated_commit_from_fetchhead(resource,string,string,string)

    Returns git_annotated_commit resource

git_annotated_commit_from_ref(resource,resource)

    Returns git_annotated_commit resource

git_annotated_commit_from_revspec(resource,string)

    Returns git_annotated_commit resource

git_annotated_commit_lookup(resource,string)

    Returns git_annotated_commit resource

git_annotated_commit_id(resource)

    Returns string

git_annotated_commit_free(resource)

----------------------------------------
[git_branch]
----------------------------------------

git_branch_create(resource,string,resource,bool)

    Returns git_reference resource

git_branch_create_from_annotated(resource,string,resource,bool)

    Returns git_reference resource

git_branch_delete(resource)

git_branch_is_head(resource)

    Returns bool

git_branch_iterator_free(resource)

git_branch_next(&int,resource)

    Returns git_reference resource or false at iter over

git_branch_lookup(resource,string,int)

    Returns git_reference resource

git_branch_move(resource,string,bool)

    Returns git_reference resource

git_branch_name(resource)

    Returns string

git_branch_set_upstream(resource,string|null)

git_branch_upstream(resource)

    Returns git_reference resource if found, false otherwise

git_branch_upstream_name(resource,string)

    Returns string

git_branch_upstream_remote(resource,string)

    Returns string

----------------------------------------
[git_config]
----------------------------------------

git_config_new()

    Returns git_config resource

git_config_free(resource)

git_config_open_default()

    Returns git_config resource

git_config_open_global(resource)

    Returns git_config resource

git_config_open_level(resource,int)

    Returns git_config resource

git_config_open_ondisk(resource,string)

    Returns git_config resource

git_config_parse_bool(string)

    Returns bool

git_config_parse_int32(string)

    Returns int

git_config_parse_int64(string)

    Returns int

git_config_parse_path(string)

    Returns string

git_config_set_bool(resource,string,bool)

git_config_set_int32(resource,string,int)

git_config_set_int64(resource,string,int)

git_config_set_multivar(resource,string,string,strin)

git_config_set_string(resource,string,string)

git_config_get_bool(resource,string)

    Returns bool

git_config_get_entry(resource,string)

    ** Note: returns an array with the following structure:

      array(3) {
        ["name"]
        ["value"]
        ["level"]
      } **

    Returns array

git_config_get_int32(resource,string)

    Returns int

git_config_get_int64(resource,string)

    Returns int

git_config_get_path(resource,string)

    Returns string

git_config_get_string(resource,string)

    Returns string

git_config_get_string_buf(resource,string)

    ** Note: this function is functionally equivalent to
       git_config_get_string(), except that it can encode binary
       strings. However binary strings are typically not stored in git config
       files... **

    Returns string

git_config_delete_entry(resource,string)

git_config_delete_multivar(resource,string,string)

git_config_find_global()

git_config_find_programdata()

git_config_find_system()

git_config_find_xdg()

git_config_snapshot(resource)

    Returns git_config resource

git_config_add_file_ondisk(resource,string,int,bool)

git_config_foreach(resource,callable,mixed)

    ** Note: if an iteration of the callback returns non-zero, the operation is
       aborted. Return a positive value (or true) to abort and avoid throwing an
       exception. If a negative value is returned, then the function assumes its
       a git error. **

    Callback signature: callback(array $entry,mixed $payload)

git_config_foreach_match(resource,string,callable,mixed)

    ** See notes for git_config_foreach. **

git_config_get_mapped(resource,string,array)

    ** The array must be an indexed array of indexed arrays, with each inner
       array having the structure of the git_cvar_map in the order
       [cvar_type,str_match,map_value]. The map_value entry is forced to be an
       integer. **

    Returns int

git_config_add_backend(resource,object,int,bool)

git_config_backend_foreach_match(object,string|null,callable,mixed)

    ** See notes for git_config_foreach. **

git_config_iterator_new(resource)

    Returns git_config_iterator resource

git_config_iterator_new(resource,string,string|null)

    Returns git_config_iterator resource

git_config_iterator_glob_new(resource,string)

    Returns git_config_iterator resource

git_config_multivar_iterator_new(resource,string,string|null)

    Returns git_config_iterator resource

git_config_iterator_free(resource)

git_config_next(resource)

    ** See git_config_get_entry() for details on returned value. **

    Returns array

git_config_lookup_map_value(array,string)

    ** The array must be an indexed array of indexed arrays, with each inner
       array having the structure of the git_cvar_map in the order
       [cvar_type,str_match,map_value]. The map_value entry is forced to be an
       integer. **

----------------------------------------
[git_clone]
----------------------------------------

git_clone(string,string,array|null)

    ** Note: the last parameter (options) is passed as an array with the keys
       representing the properties of the git_clone_options struct. The
       checkout_opts and fetch_opts properties may be arrays to their respective
       structures. Any properties that are not specified inherit the defaults
       provided via calling git_clone_init_options(). You may specify null to
       use only the defaults. **

    repository_cb signature: callback(string $path,bool $bare,mixed $payload)

        Should return git_repository resource

    Returns git_repository resource

----------------------------------------
[git_checkout]
----------------------------------------

git_checkout_head(resource,array|null)

    ** Note: the last parameter (options) is passed as an array with the keys
       matching the properties of the git_checkout_options struct. Any
       properties that are not specified inherit the defaults provided via
       calling git_checkout_init_options(). You may specify null to use only the
       defaults. **

git_checkout_tree(resource,resource,array|null)

    ** See notes for git_checkout_head(). **

----------------------------------------
[git_tag]
----------------------------------------

git_tag_annotation_create(resource,string,resource,resource,string)

    Returns string

git_tag_create(resource,string,resource,resource,string,bool)

    Returns string

git_tag_create_frombuffer(resource,string,bool)

    Returns string

git_tag_create_lightweight(resource,string,resource,bool)

    Returns string

git_tag_lookup(resource,string)

    Returns git_tag resource

git_tag_lookup_prefix(resource,string)

    Returns git_tag resource

git_tag_free(resource)

git_tag_id(resource)

    Returns string

git_tag_target_id(resource)

    Returns string

git_tag_message(resource)

    Returns string

git_tag_name(resource)

    Returns string

git_tag_owner(resource)

    Returns git_repository resource

git_tag_peel(resource)

    Returns git_object resource

git_tag_target(resource)

    Returns git_object resource

git_tag_tagger(resource)

    Returns git_signature resource (or null)

git_tag_target_type(resource)

    Returns int

git_tag_delete(resource,string)

git_tag_dup(resource)

    Returns git_tag resource

git_tag_list(resource)

    Returns array

git_tag_list_match(resource,string)

    Returns array

git_tag_foreach(resource,callable,mixed)

----------------------------------------
[git_diff]
----------------------------------------

* Callback signatures *

    notify_callback(resource $diff,array $delta,string $matchedPathspec,mixed $payload)

        returns int

    progress_callback(resource $diff,string $oldPath,string $newPath,mixed $payload)

        returns bool: false value aborts diff (except null)

    file_callback(array $delta,float $progress,mixed $payload)

    binary_callback(array $delta,array $binary,mixed $payload)

    hunk_callback(array $delta,array $hunk,mixed $payload)

    line_callback(array $delta,array $hunk,array $line,mixed $payload)

git_diff_free(resource)

git_diff_blob_to_buffer(resource|null,string|null,string|null,string|null,
    array|null,callable,callable,callable,callable,mixed)

git_diff_blobs(resource|null,string|null,resource|null,string|null,array|null,
    callable,callable,callable,callable,mixed)

git_diff_buffers(string|null,string|null,string|null,string|null,array|null,
    callable,callable,callable,callable,mixed)

git_diff_commit_as_email(resource,resource,int,int,int,array|null)

git_diff_from_buffer(string)

    Returns git_diff resource

git_diff_print(resource,int,callable,mixed)

git_diff_get_delta(resource,int)

    Returns array

git_diff_get_perfdata(resource)

    Returns array

git_diff_is_sorted_icase(resource)

    Returns bool

git_diff_foreach(resource,callable,callable,callable,callable,mixed)

git_diff_merge(resource,resource)

git_diff_to_buf(resource,int)

    Returns string

git_diff_tree_to_tree(resource,resource|null,resource|null,array|null)

    Returns git_diff resource

git_diff_tree_to_workdir(resource,resource|null,array|null)

    Returns git_diff resource

git_diff_tree_to_workdir_with_index(resource,resource|null,array|null)

    Returns git_diff resource

git_diff_status_char(int)

    Returns string

git_diff_num_deltas(resource)

    Returns int

git_diff_num_deltas_of_type(resource)

    Returns int

git_diff_find_similar(resource,array)

    ** The options array has the same property names as the libgit2 type. **

git_diff_get_stats(resource)

    Returns git_diff_stats resource

git_diff_stats_free(resource)

git_diff_stats_deletions(resource)

    Returns int

git_diff_stats_insertions(resource)

    Returns int

git_diff_stats_to_buf(resource,int,int)

    Returns string

git_diff_format_email(resource,array)

    ** NOTE: The $opts['author'] option can be either an array like those
       returned from git2_signature_convert() OR a git_signature resource. **

    Returns string

----------------------------------------
[git_index]
----------------------------------------

git_index_add_bypath(resource,string)

git_index_caps(resource)

    Returns int

git_index_checksum(resource)

    Returns string

git_index_clear(resource)

git_index_conflict_cleanup(resource)

git_index_conflict_remove(resource,string)

git_index_entrycount(resource)

    Returns int

git_index_find(resource,string)

    Returns int

git_index_find_prefix(resource,string)

    Returns int

git_index_free(resource)

git_index_has_conflicts(resource)

    Returns boolean

git_index_new()

    Returns git_index resource

git_index_open(string)

    Returns git_index resource

git_index_owner(resource)

    Returns git_repository resource

git_index_path(resource)

    Returns string

git_index_read(resource,boolean)

git_index_read_tree(resource,resource)

git_index_remove(resource,string,int)

git_index_remove_bypath(resource,string)

git_index_remove_directory(resource,string,int)

git_index_set_caps(resource,int)

git_index_set_version(resource,int)

git_index_version(resource)

    Returns int

git_index_write(resource)

git_index_write_tree(resource)

    Returns string

git_index_write_tree_to(resource,resource)

    Returns string

--------------------------------------------------------------------------------
Class API Reference

The php-git2 extension provides an abstraction as a PHP class only when it is
useful for subclassing the construct (e.g. in the case of a git_odb_backend) or
when the C API employs struct with pointer-to-function members.

The following classes are provided by the extension:

class GitODBBackend:

    ** This class has properties/methods that align with the git_odb_backend
       structure. **

    properties:
        int $version
        resource $odb

    methods:
        ** All methods should throw on failure. **

        ** If a method is not to be implemented, either leave it alone (i.e. do
           not implement it) or have it call trigger_error() with
           E_USER_ERROR. These functions can be called from userspace if you
           know what is available; however they are designed to be defined in
           userspace and called by git2. **

        read(int &$type,string $oid)

            ** Will return size and type as out parameters respectively. **

            Returns string

        read_prefix(string &$fullOid,int &$type,string $abbrevOid)

            ** Will return oid, size and type as out parameters respectively. **

            Returns string

        read_header(int &$size,int &$type,string $oid)

            ** Will return size and type as out parameters respectively. **

            Returns true

        write(string $oid,string $data,int $type)

            Returns true

        writestream(int $offset,int $objectType)

            Returns object instance of type GitODBStream

        readstream(string $oid)

            Returns object instance of type GitODBStream

        exists(string $oid)

            Returns bool

        refresh()

        for_each(callable $func,mixed $payload)

            ** Note: this function is not named canonically with git2 since
               "foreach" is a reserved word in PHP. **

            Notes on overridding:

            The callback has the same signature as the method. However some
            important distinctions apply due to implementation constraints. When
            the git2 library internally is routed to this method by the
            extension, the payload will be null even if some underlying value is
            assigned. In this case the extension takes care of forwarding the
            payload behind-the-scenes since the payload value cannot be
            converted to a PHP value (plus, that operation would be wasteful
            anyway). The payload value only really matters in userspace if
            userspace initiated the method call itself.

            An implementation overriding this method should always pass in the
            payload as the second parameter to the callback so that a userspace
            payload is routed correctly.

            If the callback returns a non-zero value, the implementation should
            stop looping. The method should return 0 or the non-zero callback
            value upon return.

            Returns int

        writepack(callable $func,mixed $payload)

            Returns object instance of type GitODBWritepack

        free()

final class GitODBWritepack:

    ** This class has properties/methods that align with the git_odb_writepack
       structure. **

    properties:
        backend: object instance of type GitODBBackend

    methods:
        append(string)

            Returns long

        commit()

            Returns long

        free()

final class GitODBStream:

    ** This class has properties/methods that align with the git_odb_stream
       structure. **

    properties:
        mode: int
        declared_size: int
        received_bytes: int

    methods:
        ** All methods should throw on failure. **

        read(int $bufsz)

            ** Creates a buffer of the specified size and calls the read()
               function for the stream. **

            Returns string

        write(string $buffer)

        finalize_write(string $oid)

final class GitWritestream:

    ** This class has properties/methods that align with the git_writestream
       structure. **

    methods:
        write(string $buffer)

        close()

        free()

            ** This method is included for completeness but doesn't actually
               need to be called. It is a noop. **

abstract class GitConfigBackend:

    ** This class has properties/methods that align with the git_config_backend
       structure. **

    methods:
        mixed open(int $level)

            ** Method may return false to indicate failure. If the method has no
               return value (i.e. returns null), or a truthy value is returned,
               then the implementation assumes success. **

        array get(string $key)

            ** Method returns array with properties 'name', 'value' and 'level'
               corresponding to git_config_entry. If the method fails lookup, it
               should return false or some falsy value (e.g. 0, null). **

            ** If 'level' is not specified in the return array, then level
               defaults to GIT_CONFIG_LEVEL_APP. **

        mixed set(string $key,string $value)

            ** Method may return false to indicate failure. If the method has no
               return value (i.e. returns null), or a truthy value is returned,
               then the implementation assumes success. **

        mixed set_multivar(string $name,string $regexp,string $value)

            ** Method may return false to indicate failure. If the method has no
               return value (i.e. returns null), or a truthy value is returned,
               then the implementation assumes success. **

        mixed del(string $name)

            ** Method may return false to indicate failure. If the method has no
               return value (i.e. returns null), or a truthy value is returned,
               then the implementation assumes success. **

        mixed del_multivar(string $name,string $regexp)

            ** Method may return false to indicate failure. If the method has no
               return value (i.e. returns null), or a truthy value is returned,
               then the implementation assumes success. **

        mixed iterator_new()

            ** Method should initialize the object for a new
               iteration. Iteration will call the iterator_next() method. This
               method may optionally return a context value to identify the
               iterator. This is largely not useful since git2 config iteration
               is currently only synchronous. **

        array iterator_next(mixed $context)

            ** Method should return next config value. The return value is the
               same as for get(). The $context argument holds any value returned
               from iterator_new(). **

            ** Method returns false on iteration over. **

        GitConfigBackend snapshot()

        void lock()

        void unlock(int success)
