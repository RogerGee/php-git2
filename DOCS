PHP libgit2 bindings API documentation
--------------------------------------------------------------------------------
The API is divided (roughly) by the kind of opaque, libgit2 object on which the
API function operates (e.g. git_repository, git_reference, ETC.). In most cases
the PHP API uses resource values for the major libgit2 opaque data types.

Since PHP has native exception handling, most API calls are reworked to return
the main result value. For example, git_repository_new() returns a resource to
the repository (originally assigned to the first by-reference parameter). We
also rework the structure of some library calls due to inherent difficulties
porting the C interface to PHP (e.g. when pointers are used). Sometimes this
requires adding API routines not originally in the libgit2 specification.

Please consult the official libgit2 documentation for descriptions of the
behavior of the functions and their arguments. This section only details the PHP
interface.

--------------------------------------------------------------------------------
Functions provided by the extension that are not git2 wrappers (have the form
'git2_*'):

git2_version()

    Gets a version string

    Returns string

--------------------------------------------------------------------------------
Core API routines operate on opaque, resource values. They try to conform to the
original, C library calls they wrap.

----------------------------------------
[git_repository]
----------------------------------------

git_repository_init(string,bool)

    Returns git_repository resource

git_repository_new()

    Returns git_repository resource

git_repository_free(resource)

git_repository_open(string)

    Returns git_repository resource

git_repository_open_bare(string)

    Returns git_repository resource

git_repository__cleanup(resource)

git_repository_detach_head(resource)

git_repository_discover(string,bool,string)

    Returns string

git_repository_get_namespace(resource)

    Returns string

git_repository_hashfile(resource,string,long,string)

    Returns string

git_repository_path(resource)

    Returns string

git_repository_odb(resource)

    Returns git_odb resource

git_repository_set_odb(resource,resource)

----------------------------------------
[git_reference]
----------------------------------------

git_reference_list(resource)

    Returns array of string

git_reference_lookup(resource,string)

    Returns git_reference resource

git_reference_free(resource)

git_reference_peel(resource,long)

    Returns git_reference resource

git_reference_name_to_id(resource,string)

    Returns string

git_reference_create(resource,string,string,bool,string)

    Returns git_reference resource

git_reference_create_matching(resource,string,string,bool,string,string)

    Returns git_reference resource

----------------------------------------
[git_object]
----------------------------------------
git_object_id(resource)

    Returns string

git_object_lookup(resource,string,int)

    Returns resource

git_object_free(resource)

----------------------------------------
[git_revwalk]
----------------------------------------
git_revwalk_new(resource)

git_revwalk_push(resource,string)

git_revwalk_next(resource)

    Returns string or false when on iterover

git_revwalk_hide(resource,string)

git_revwalk_sorting(resource,int)

git_revwalk_reset(resource)

git_revwalk_free(resource)

----------------------------------------
[git_packbuilder]
----------------------------------------

git_packbuilder_new(resource)

    Returns git_packbuilder resource

git_packbuilder_free(resource)

git_packbuilder_hash(resource)

    Returns string

git_packbuilder_insert_commit(resource,string)

git_packbuilder_insert_walk(resource,resource)

git_packbuilder_insert_recur(resource,string,string|null)

git_packbuilder_insert_tree(resource,string)

git_packbuilder_insert(resource,string,string|null)

git_packbuilder_foreach(resource,callable|stream,mixed)

    ** The 2nd parameter may optionally be a stream resource instead of a
       callable. In this case the data is written to the stream at each
       iteration. Payload data is ignored. **

    Callback signature: callback(string $data,long $length,mixed $payload)

git_packbuilder_set_threads(resource,int)

----------------------------------------
[git_indexer]
----------------------------------------

git_indexer_new(string,long,resource,callable,mixed)

    ** The 3rd parameter may be null. **

    Callback signature: callback(array $stats,mixed $payload)

    Return git_indexer resource

git_indexer_hash(resource)

    Returns string

git_indexer_append(resource,string)

    ** Transfer progress is stored in the resource. As such it is not passed to
       this function. **

git_indexer_commit(resource)

    ** Transfer progress is stored in the resource. As such it is not passed to
       this function. **

git_indexer_free(resource)

----------------------------------------
[git_odb]
    [git_odb_object]
----------------------------------------

git_odb_new()

    Return git_odb resource

git_odb_free(resource)

git_odb_write_pack(resource,callable,mixed)

    ** The 3rd parameter may be null. **

    Returns object instance of type GitODBWritepack

git_odb_backend_pack(string)

    Returns object instance of type GitODBBackend

git_odb_backend_loose(string,int,bool,int,int)

    Returns object instance of type GitODBBackend

git_odb_backend_one_pack(string)

    Returns object instance of type GitODBBackend

git_odb_open(string)

    Returns git_odb resource

git_odb_write(resource,string,int)

    Returns string

git_odb_read(resource,string)

    Returns git_odb_object resource

git_odb_read_header(&int,resource,string)

    Returns int (the size of the object)

git_odb_read_prefix(resource,string)

    Returns git_odb_object resource

git_odb_object_free(resource)

git_odb_object_data(resource)

    Returns string

git_odb_object_id(resource)

    Returns string

git_odb_object_size(resource)

    Returns int

git_odb_object_type(resource)

    Returns int

git_odb_object_dup(resource)

    Returns git_odb_object resource

git_odb_open_rstream(resource,string)

    Returns object instance of type GitODBStream

git_odb_open_wstream(resource,int,int)

    Returns object instance of type GitODBStream

git_odb_stream_read(GitODBStream,int)

    ** The 2nd parameter is the length of the buffer to allocate. **

    Returns string

git_odb_stream_write(GitODBStream,string)

git_odb_stream_finalize_write(GitODBStream)

    Returns string

git_odb_add_alternate(resource,GitODBBackend,int)

git_odb_add_disk_alternate(resource,string)

git_odb_add_backend(resource,GitODBBackend,int)

git_odb_exists(resource,string)

git_odb_exists_prefix(resource,string)

git_odb_foreach(resource,callable,mixed)

git_odb_refresh(resource)

git_odb_get_backend(resource,int)

    Returns object of type GitODBBackend

git_odb_num_backends(resource)

    Returns int

git_odb_hash(string,int)

    Returns string

git_odb_hashfile(string,int)

    Returns string

----------------------------------------
[git_commit]
----------------------------------------

git_commit_lookup(resource,string)

    Returns git_commit resource

git_commit_parentcount(resource)

    Returns int

git_commit_parent_id(resource,int)

    Returns string

git_commit_free(resource)

----------------------------------------
[git_blob]
----------------------------------------

git_blob_create_frombuffer(resource,string)

    Returns string

git_blob_create_fromdisk(resource,string)

    Returns string

git_blob_create_fromworkdir(resource,string)

    Returns string

git_blob_filtered_content(resource,string,bool)

    Returns string

git_blob_free(resource)

git_blob_id(resource)

    Returns string

git_blob_is_binary(resource)

    Returns int

git_blob_lookup(resource,string)

    Returns git_blob resource

git_blob_lookup_prefix(resource,string)

    Returns resource

git_blob_owner(resource)

    Returns git_repository resource

git_blob_rawcontent(resource)

    Returns string

git_blob_rawsize(resource)

    Returns int

git_blob_dup(resource)

    Returns git_blob resource

git_blob_create_fromstream(resource,string|null)

    Returns object of type GitWritestream

git_blob_create_fromstream_commit(GitWritestream)

    Returns string

----------------------------------------
[git_tree]
----------------------------------------

git_tree_dup(resource)

    Returns resource

git_tree_entrycount(resource)

    Returns int

git_tree_free(resource)

git_tree_id(resource)

    Returns string

git_tree_lookup(resource,string)

    Returns resource

git_tree_lookup_prefix(resource,string)

    Returns resource

git_tree_owner(resource)

    Returns resource

git_tree_entry_free(resource)

--------------------------------------------------------------------------------
The following structures are not represented as resources in the PHP
API. Instead a primitive or object type is used:

   git2 type                                      PHP type
   ---------                                      --------

    git_buf                                        string
    git_oid                                        string
    git_odb_writepack                              object
    git_odb_backend                                object
    git_odb_stream                                 object
    git_writestream                                object

--------------------------------------------------------------------------------
The following classes are provided by the extension where appropriate:

class GitODBWritepack:

    ** This class has properties/methods that align with the git_odb_writepack
       structure. **

    properties:
        backend: object instance of type GitODBBackend
    methods:
        append(string)

            Returns long

        commit()

            Returns long

        free()

class GitODBBackend:

    ** This class has properties/methods that align with the git_odb_backend
       structure. **

    properties:
        version: int

    methods:
        ** All methods should throw on failure. **

        ** If a method is not to be implemented, either leave it alone (i.e. do
           not implement it) or have it call trigger_error() with
           E_USER_ERROR. These functions can be called from userspace if you
           know what is available; however they are designed to be defined in
           userspace and called by git2. **

        read(int& type,string oid)

            ** Will return size and type as out parameters respectively. **

            Returns string

        read_prefix(string& fullOid,int& type,string abbrevOid)

            ** Will return oid, size and type as out parameters respectively. **

            Returns string

        read_header(int& size,int& type,string oid)

            ** Will return size and type as out parameters respectively. **

            Returns true

        write(string oid,string data,int type)

            Returns true

        writestream(int offset,int objectType)

            Returns object instance of type GitODBStream

        readstream(string oid)

            Returns object instance of type GitODBStream

        exists(string oid)

            Returns bool

        refresh()

        for_each(callable func,mixed payload)

            ** Note: this function is not named canonically with git2 since
               "foreach" is a reserved word in PHP. **

        writepack(callable func,mixed payload)

            Returns object instance of type GitODBWritepack

        free()

class GitODBStream:

    ** This class has properties/methods that align with the git_odb_stream
       structure. **

    properties:
        mode: int
        declared_size: int
        received_bytes: int

    methods:
        ** All methods should throw on failure. **

        read(int bufsz)

            ** Creates a buffer of the specified size and calls the read()
               function for the stream. **

            Returns string

        write(string buffer)

        finalize_write(string oid)

final class GitWritestream:

    ** This class has properties/methods that align with the git_writestream
       structure. **

    methods:
        write(string buffer)

        close()

        free()

            ** This method is included for completeness but doesn't actually
               need to be called. It is a noop. **
